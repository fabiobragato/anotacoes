- Terraform:

	• HashiCorp Configuration Language (HCL) is the language utilized by Terraform configuration
	• A block contains information about the infrastructure platform
	• Example of HCL:
	
		resource "local_file" "pet" {
			filename = "/root/pets.txt"
			content = "We love pets!"
		}
		
		1. "resource": block name
		2. "local_file": resource type
		3. "local": provider
		4. "file": resource
		5. "pet": resource name
		6. inside the brackets "{}": arguments
			6.1. "filename": we assign the absolute path to the file we want to create
			6.2. "content": we can also add some content to this file
			
	• Example of HCL creating EC2 instance:
	
		resource "aws_instance" "webserver" {
			ami = "ami-0c2f25c1f66a1ff4d"
			instance_type = "t2.micro"
		}
		
	• Example of HCL creating S3 Buckets:
	
		resource "aws_s3_bucket" "data" {
			bucket = "webserver-bucket-org-2207"
			acl = "private"
		}
		
	• Terraform workflow consists of four steps:
	
		1. Write the configuration file 
		2. Run the Terraform Init command ("terraform init")
		3. Review the execution plan using Terraform Plan command ("terraform plan")
		4. Apply the changes using the Terraform Apply command ("terraform apply")
		
	• Terraform Update and destroy:
	
		1. Updating:
			1.1. We add one new argument to our resource
			1.2. Command "Terraform plan" to see what we changes
			1.3. Command "Terraform apply" to apply our changes
			
		2. Destroying:
			2.1. We want to destroy what we made
			2.2. Command "Terraform destroy" to delete all the resource maded
			
	• Terraform Providers:
		
		1. There are 3 types:
			~ Official (AWS, Google, Azure, ...)
			~ Partner (Heroku, ...)
			~ Community (ucloud, ...)
			
		2. It's specified when you use the command "terraform init"
		3. For example:
			* registry.terraform.io/hashicorp/local: version = "~> 2.0.0"
			* "registry.terraform.io" is the hostname
			* "hashicorp" is the organizational namespace 
			* "local" is the provider
			
		* Note: if you add a modification including a new provider, you will have to "init" terraform again
			
	• Configuration directory:
	
		1. We can put as many ".tf" file as we want
		2. But the most common is to build a single configuration file and put the resource configuration together
		3. Other ".tf" that is used:
			3.1. main.tf -> main configuration file containing resource definition
			3.2. variables.tf -> contains variable declarations
			3.3. outputs.tf -> contains outputs from resources
			3.4. provider.tf -> contains provider definition
			
	• Variables (consists of block and arguments):
	
		1. Create a file named "variables.tf":
		
			variable "filename" {
				default = "/root/pets.txt"
				type = string
				description = "the path of local file"
			}
		
		2. In the main.tf now you can use:
		
			resource "local_file" "pet" {
				filename = var.filename
				content = "test"
			}
	
	• Types of variables:
	
		1. string
		2. number
		3. bool: (true/false)
		4. any: (default value)
		5. list: ["dog", "cat"]
		6. set: equals to list but do not have repeatable items
		7. map: pet1 = cat pet2 = dog
		8. object: complex data structure
		9. tuple: complex data structure
		
	• Examples of use:
	
		1. List:
			
			variable "prefix" {
				default = ["Mr", "Mrs", "Sir"]
				type = list --> you can also use list of type just like this: list(string)
			}
		
			resource "random_pet" "my_pet" {
				prefix = var.prefix[0]
			}
		
		2. Map:
		
			variable file-content {
				type = map --> you can also use map of type just like this: map(string)
				default = {
					"statement1" = "We love pets!"
					"statement2" = "We love animals!"
				}
			}
			
			resource "local_file" "my-pet" {
				filename = "/root/pets.txt"
				content = var.file-content["statement2"]
			}
			
	• Using variables:
	
		1. Enter value way:
		
			variable "prefix" {
			}
			
			~ When we terraform apply the console will prompt to enter values for each value in interactive mode
			
		2. Enviroment variables:
		
			export TF_VAR_filename = "/root/pets.txt"
			export TF_VAR_content = "We love pets"
			
		3. Variable definition file:
		
			~ In a file named "terraform.tfvars" | "terraform.tfvars.json" | "*.auto.tfvars" | "*.auto.tfvars.json":
			
				filename = "/root/pets.txt"
				content = "We love pets!"
				
	• Sequence of execution:
	
		1. Enviroment variables
		2. terraform.tfvars
		3. *.auto.tfvars (alphabetical order)
		4. -var or -var-file (command-line flags)
		
	• Resource attibutes:
	
		1. We can use the output of a resource to use as input of one another resource:
		
			resource "time_static" "time_update"{
			}
			
			resource "local_file" "testing" {
				filename = "/root/test.txt"
				content = "Test timestamp: ${time_static.time_update.id}"
			}
		
	• Resource dependencies:
	
		resource "local_file" "pet" {
			filename = var.filename
			content = "My favorite pet is Mr.Cat"
			
			depends_on = [
				random_pet.my-pet
			]
		}
		
		resource "random_pet" "my-pet" {
			prefix = var.prefix
			separator = var.separator
			length = var.length
		}
		
	• Outputs variables:
	
		output pet-name {
			value = random_pet.my-pet.id
			description = "Record the value of pet ID generated by the random_pet resource"
		}
	
		1. Works like a print on screen. We can also see all the outputs typing:
			
			terraform output
			terraform output pet-name (for specific output)
			